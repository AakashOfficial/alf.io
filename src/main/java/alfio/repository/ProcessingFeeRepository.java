package alfio.repository;

import alfio.model.ProcessingFee;
import alfio.model.transaction.PaymentProxy;
import ch.digitalfondue.npjt.*;

import java.time.ZonedDateTime;
import java.util.List;

@QueryRepository
public interface ProcessingFeeRepository {

    @Query("select * from processing_fee_link_view where organization_id_fk = :orgId and event_id_fk = :eventId")
    List<ProcessingFee> findByOrganizationIdAndEventId(@Bind("orgId") int organizationId, @Bind("eventId") int eventId);

    @Query("select * from processing_fee_link_view where organization_id_fk = :orgId and event_id_fk = :eventId and payment_method = :paymentMethod")
    List<ProcessingFee> findByOrganizationIdAndEventId(@Bind("orgId") int organizationId, @Bind("eventId") int eventId, @Bind("paymentMethod") PaymentProxy paymentProxy);

    @Query("insert into processing_fee(event_id_fk, organization_id_fk, valid_from, valid_to, amount, fee_type, categories) " +
        "values(:eventId, :orgId, :validFrom, :validTo, :amount, :feeType, :categories")
    @AutoGeneratedKey("id")
    AffectedRowCountAndKey<Integer> insert(@Bind("eventId") int eventId,
                                           @Bind("orgId") int organizationId,
                                           @Bind("validFrom")ZonedDateTime validFrom,
                                           @Bind("validTo") ZonedDateTime validTo,
                                           @Bind("amount") int amount,
                                           @Bind("feeType") ProcessingFee.FeeType feeType,
                                           @Bind("categories") String categoriesJson);

    @Query("insert into processing_fee_link (fee_id_fk, payment_method) values(:feeId, :paymentMethod)")
    String linkToPaymentMethod(@Bind("feeId") int feeId, @Bind("paymentMethod") PaymentProxy paymentMethod);

}
