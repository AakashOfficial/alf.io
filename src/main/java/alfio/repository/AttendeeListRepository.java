/**
 * This file is part of alf.io.
 *
 * alf.io is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * alf.io is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.
 */
package alfio.repository;

import alfio.model.attendeelist.AttendeeList;
import alfio.model.attendeelist.AttendeeListConfiguration;
import alfio.model.attendeelist.AttendeeListItem;
import alfio.model.attendeelist.WhitelistedTicket;
import ch.digitalfondue.npjt.*;

import java.util.List;
import java.util.Optional;

@QueryRepository
public interface AttendeeListRepository {

    String BY_EVENT_ID = "select * from attendee_list_configuration_active where event_id_fk = :eventId";

    @Query("insert into attendee_list(name, description, organization_id_fk) values(:name, :description, :orgId)")
    @AutoGeneratedKey("id")
    AffectedRowCountAndKey<Integer> insert(@Bind("name") String name,
                                           @Bind("description") String description,
                                           @Bind("orgId") int organizationId);

    @Query("select * from attendee_list where id = :id")
    AttendeeList getById(@Bind("id") int id);

    @Query("update attendee_list set name = :name, description = :description where id = :id")
    int update(@Bind("id") int id, @Bind("name") String name, @Bind("description") String description);

    @Query("select * from attendee_list where id = :id")
    Optional<AttendeeList> getOptionalById(@Bind("id") int id);

    @Query("select * from attendee_list where organization_id_fk = :organizationId")
    List<AttendeeList> getAllForOrganization(@Bind("organizationId") int organizationId);

    @Query("insert into attendee_list_configuration(attendee_list_id_fk, event_id_fk, ticket_category_id_fk, type, match_type, max_allocation)" +
        " values(:attendeeListId, :eventId, :ticketCategoryId, :type, :matchType, :maxAllocation)")
    @AutoGeneratedKey("id")
    AffectedRowCountAndKey<Integer> createConfiguration(@Bind("attendeeListId") int attendeeListId,
                                                        @Bind("eventId") int eventId,
                                                        @Bind("ticketCategoryId") Integer ticketCategoryId,
                                                        @Bind("type") AttendeeListConfiguration.Type type,
                                                        @Bind("matchType") AttendeeListConfiguration.MatchType matchType,
                                                        @Bind("maxAllocation") Integer maxAllocation);

    @Query(type = QueryType.TEMPLATE,
        value = "insert into attendee_list_item(attendee_list_id_fk, value, description) values(:attendeeListId, :value, :description)")
    String insertItemTemplate();

    @Query("select * from attendee_list_item where attendee_list_id_fk = :attendeeListId order by value")
    List<AttendeeListItem> getItems(@Bind("attendeeListId") int attendeeListId);

    @Query("insert into whitelisted_ticket(attendee_list_item_id_fk, attendee_list_configuration_id_fk, ticket_id_fk, requires_unique_value)" +
        " values(:itemId, :configurationId, :ticketId, :requiresUniqueValue)")
    int insertWhitelistedTicket(@Bind("itemId") int itemId, @Bind("configurationId") int configurationId, @Bind("ticketId") int ticketId, @Bind("requiresUniqueValue") Boolean requiresUniqueValue);

    @Query(BY_EVENT_ID +
        " and ticket_category_id_fk = :categoryId" +
        " union all select * from attendee_list_configuration_active where event_id_fk = :eventId and ticket_category_id_fk is null")
    List<AttendeeListConfiguration> findActiveConfigurationsFor(@Bind("eventId") int eventId, @Bind("categoryId") int categoryId);

    @Query(BY_EVENT_ID)
    List<AttendeeListConfiguration> findActiveConfigurationsForEvent(@Bind("eventId") int eventId);

    @Query("select * from attendee_list_configuration_active where id = :configurationId")
    AttendeeListConfiguration getConfiguration(@Bind("configurationId") int configurationId);

    @Query("select * from attendee_list_configuration where id = :configurationId for update")
    AttendeeListConfiguration getConfigurationForUpdate(@Bind("configurationId") int configurationId);

    @Query("select count(*) from whitelisted_ticket where attendee_list_configuration_id_fk = :configurationId")
    int countWhitelistedTicketsForConfiguration(@Bind("configurationId") int configurationId);

    @Query("update attendee_list_configuration set attendee_list_id_fk = :attendeeListId, event_id_fk = :eventId, ticket_category_id_fk = :categoryId, type = :type, match_type = :matchType, max_allocation = :maxAllocation where id = :id")
    int updateConfiguration(@Bind("id") int configurationId,
                            @Bind("attendeeListId") int attendeeListId,
                            @Bind("eventId") int eventId,
                            @Bind("categoryId") Integer categoryId,
                            @Bind("type") AttendeeListConfiguration.Type type,
                            @Bind("matchType") AttendeeListConfiguration.MatchType matchType,
                            @Bind("maxAllocation") Integer maxAllocation);

    @Query("update attendee_list_configuration set active = false where id = :id")
    int disableConfiguration(@Bind("id") int id);

    @Query("select * from attendee_list_item wi where wi.attendee_list_id_fk = :attendeeListId and wi.value = lower(:value)")
    Optional<AttendeeListItem> findItemByValueExactMatch(@Bind("attendeeListId") int attendeeListId, @Bind("value") String value);

    @Query("select * from attendee_list_item wi where wi.attendee_list_id_fk = :attendeeListId and wi.value like lower(:value) limit 1")
    Optional<AttendeeListItem> findItemEndsWith(@Bind("configurationId") int configurationId,
                                                @Bind("attendeeListId") int attendeeListId,
                                                @Bind("value") String value);

    @Query("select * from whitelisted_ticket where attendee_list_id_fk = :itemId and attendee_list_configuration_id_fk = :configurationId")
    Optional<WhitelistedTicket> findExistingWhitelistedTicket(@Bind("itemId") int itemId,
                                                              @Bind("configurationId") int configurationId);

    @Query("select count(*) from whitelisted_ticket where attendee_list_item_id_fk = :itemId and attendee_list_configuration_id_fk = :configurationId")
    int countExistingWhitelistedTickets(@Bind("itemId") int itemId,
                                        @Bind("configurationId") int configurationId);

    @Query("delete from whitelisted_ticket where ticket_id_fk in (:ticketIds)")
    int deleteExistingWhitelistedTickets(@Bind("ticketIds") List<Integer> ticketIds);


}
